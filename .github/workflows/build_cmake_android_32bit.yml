name: Build CMake for Android (armeabi-v7a) - Manual NDK Setup 29.0.13113456 + Debugging

on:
  workflow_dispatch

jobs:
  build_android_armeabi_v7a:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # --- MANUAL NDK SETUP STARTS ---
    - name: Install Android SDK Command-line Tools
      run: |
        echo "--- Installing SDK Command-line Tools ---"
        # Set ANDROID_SDK_ROOT early and export it for the current script
        export ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk
        mkdir -p $ANDROID_SDK_ROOT
        echo "ANDROID_SDK_ROOT set to $ANDROID_SDK_ROOT"

        # Use the latest command line tools URL
        SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-latest.zip"
        CMD_TOOLS_ZIP="cmdline-tools.zip"
        echo "Downloading Command-line Tools from $SDK_TOOLS_URL"
        wget $SDK_TOOLS_URL -O $CMD_TOOLS_ZIP || { echo "Error: Download failed!"; exit 1; }
        echo "Command-line Tools downloaded: $CMD_TOOLS_ZIP"

        echo "Extracting Command-line Tools..."
        unzip $CMD_TOOLS_ZIP -d $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction || { echo "Error: Extraction failed!"; exit 1; }
        echo "Command-line Tools extracted to $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction."

        CMD_TOOLS_DIR="$ANDROID_SDK_ROOT/cmdline-tools-temp-extraction"
        CMD_TOOLS_LATEST_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest"
        mkdir -p $CMD_TOOLS_LATEST_DIR

        # Move contents, handling potential nested directory structure
        if [ -d "$CMD_TOOLS_DIR/cmdline-tools" ]; then
            echo "Detected nested structure."
            mv $CMD_TOOLS_DIR/cmdline-tools/* $CMD_TOOLS_LATEST_DIR/ || { echo "Nested move command failed!"; exit 1; }
        else
            echo "Detected flat structure."
            mv $CMD_TOOLS_DIR/* $CMD_TOOLS_LATEST_DIR/ || { echo "Flat move command failed!"; exit 1; }
        fi
        echo "Moved contents to $CMD_TOOLS_LATEST_DIR."

        rm -rf $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction

        # Add tools/latest/bin to PATH for the current script and future steps
        export PATH=$CMD_TOOLS_LATEST_DIR/bin:$PATH
        echo "PATH for this step updated: $PATH"

        echo "--- Listing contents of sdkmanager bin directory ---"
        ls -l $CMD_TOOLS_LATEST_DIR/bin/ || echo "Listing failed for sdkmanager bin directory."

        echo "--- Checking if sdkmanager is found in PATH ---"
        command -v sdkmanager || { echo "sdkmanager NOT found in PATH after this step. PATH is: $PATH"; exit 1; }
        echo "sdkmanager found."

        # Set environment variables for subsequent steps
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV # Ensure updated PATH is saved

        echo "Accepting SDK licenses..."
        # Use the exported ANDROID_SDK_ROOT and updated PATH directly
        yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT || true
        echo "SDK licenses accepted."
        echo "--- SDK Command-line Tools Installation Complete ---"
      shell: bash
      timeout-minutes: 5

    - name: List Available SDK Packages
      run: |
        echo "--- Listing Available SDK Packages ---"
        # Variables are automatically available from GITHUB_ENV
        echo "PATH at the start of List step: $PATH"
        echo "ANDROID_SDK_ROOT at the start of List step: $ANDROID_SDK_ROOT"

        command -v sdkmanager || { echo "sdkmanager NOT found in PATH. PATH is: $PATH"; exit 1; }

        echo "Running sdkmanager --list..."
        # Using &> to capture stdout and stderr
        sdkmanager --list --sdk_root=$ANDROID_SDK_ROOT &> sdk_packages_list.txt || \
          { echo "Error: sdkmanager --list failed!"; cat sdk_packages_list.txt; exit 1; }

        echo "--- Full Package List Output ---"
        cat sdk_packages_list.txt
        echo "--- Listing Complete ---"
        echo "--- IMPORTANT: Check the output above for the correct NDK package name (e.g., ndk;29.0.13113456 or ndk;r21e) ---"
      shell: bash
      timeout-minutes: 3

    - name: Install Android NDK
      run: |
        echo "--- Installing Android NDK ---"
        # Variables are automatically available from GITHUB_ENV
        echo "PATH at the start of Install Android NDK step: $PATH"
        echo "ANDROID_SDK_ROOT at the start of Install Android NDK step: $ANDROID_SDK_ROOT"
        command -v sdkmanager || { echo "sdkmanager NOT found in PATH. PATH is: $PATH"; exit 1; }

        # *** IMPORTANT: NDK Version as requested: 29.0.13113456 ***
        # This should match the package name in sdkmanager --list
        NDK_VERSION_NUMBER="29.0.13113456"
        NDK_PACKAGE="ndk;$NDK_VERSION_NUMBER" # Package format for sdkmanager --install

        echo "Running sdkmanager to install NDK $NDK_PACKAGE..."
        # Capture stdout & stderr to log file
        yes | sdkmanager --install "$NDK_PACKAGE" --sdk_root=$ANDROID_SDK_ROOT &> sdkmanager_ndk_install.log || \
          { echo "Error: sdkmanager NDK installation failed for $NDK_PACKAGE!"; cat sdkmanager_ndk_install.log; exit 1; }
        echo "sdkmanager NDK installation command finished successfully."

        # Find the full path of the newly installed NDK
        # Look for a folder named the NDK version number inside $ANDROID_SDK_ROOT/ndk/
        # Use the same NDK_VERSION_NUMBER as above
        echo "Finding installed NDK path..."
        # Use -quit after -print to stop searching once found (optimization)
        NDK_FULL_PATH=$(find $ANDROID_SDK_ROOT/ndk/ -maxdepth 1 -type d -name "$NDK_VERSION_NUMBER" -print -quit)
        if [ -z "$NDK_FULL_PATH" ]; then
          echo "Error: NDK version $NDK_VERSION_NUMBER not found after installation attempt in $ANDROID_SDK_ROOT/ndk/!"
          ls -la $ANDROID_SDK_ROOT/ndk/ || echo "Failed to list NDK directory contents."
          exit 1
        fi
        echo "Installed NDK path found at: $NDK_FULL_PATH"

        # Set ANDROID_NDK_HOME environment variable to the found NDK path
        echo "ANDROID_NDK_HOME=$NDK_FULL_PATH" >> $GITHUB_ENV

        echo "--- Android NDK Installation Complete ---"
      shell: bash
      timeout-minutes: 10


    - name: Debug NDK Setup Paths
      run: |
        echo "--- Debugging NDK Variables After Installation ---"
        # These should now be populated from GITHUB_ENV
        echo "ANDROID_NDK_HOME = ${{ env.ANDROID_NDK_HOME }}" # MUST be populated
        echo "ANDROID_SDK_ROOT = ${{ env.ANDROID_SDK_ROOT }}" # Manually set SDK root path
        echo "NDK_ROOT = ${{ env.NDK_ROOT }}" # Might be empty, ANDROID_NDK_HOME is preferred by CMake

        echo "--- Checking NDK Build Dir ---"
        # Use the ANDROID_NDK_HOME variable
        ls -l ${{ env.ANDROID_NDK_HOME }}/build/ || echo "Directory ${{ env.ANDROID_NDK_HOME }}/build/ not found or listing failed"
        echo "--- Checking NDK CMake Dir ---"
        # Use the ANDROID_NDK_HOME variable
        ls -l ${{ env.ANDROID_NDK_HOME }}/build/cmake/ || echo "Directory ${{ env.ANDROID_NDK_HOME }}/build/cmake/ not found or listing failed"
        echo "--- Checking for toolchain file existence ---"
        TOOLCHAIN_FILE_PATH="${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake"
        test -f "$TOOLCHAIN_FILE_PATH" && echo "Toolchain file EXISTS at expected path: $TOOLCHAIN_FILE_PATH" || echo "Toolchain file NOT found at expected path: $TOOLCHAIN_FILE_PATH"
        echo "Expected Toolchain Path used in Configure Step: $TOOLCHAIN_FILE_PATH"
        echo "--- Debugging Complete ---"
      shell: bash


    - name: Install Host Build Tools
      run: |
        echo "--- Installing additional build tools ---"
        # Use -qq for quieter update, -y for auto-yes
        sudo apt-get update -qq
        sudo apt-get install -y cmake make ninja-build git
        echo "Additional build tools installed."
      shell: bash

    - name: Get CMake Source Code
      env:
        CMAKE_VERSION_TAG: "v3.29.3"
      run: |
        echo "--- Getting CMake source code ---"
        # Clone into a dedicated source directory
        git clone --depth 1 --branch ${{ env.CMAKE_VERSION_TAG }} https://github.com/Kitware/CMake.git ${{ runner.temp }}/cmake_src || exit 1
        echo "CMake source downloaded to ${{ runner.temp }}/cmake_src."
      shell: bash

    # --- Removed redundant build directory creation step here ---

    - name: Configure CMake Build for Android armeabi-v7a
      env:
        # Define installation directory for the built CMake binary
        INSTALL_DIR: ${{ runner.temp }}/cmake_android_install
        # Define the directory where CMake will be built (separate from source)
        CMAKE_BUILD_DIR: ${{ runner.temp }}/cmake_build_android
        # Define the source directory
        CMAKE_SOURCE_DIR: ${{ runner.temp }}/cmake_src
      run: |
        echo "--- Configuring CMake build ---"
        # Variables are automatically available from GITHUB_ENV and step env

        # Create and navigate to the build directory
        mkdir -p ${{ env.CMAKE_BUILD_DIR }}
        cd ${{ env.CMAKE_BUILD_DIR }} || exit 1
        echo "Current directory: $(pwd)"
        echo "CMake source directory: ${{ env.CMAKE_SOURCE_DIR }}"

        echo "Running cmake configuration..."
        # Path CMAKE_TOOLCHAIN_FILE uses the ANDROID_NDK_HOME variable set earlier
        cmake ${{ env.CMAKE_SOURCE_DIR }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
          -DCMAKE_MAKE_PROGRAM=$(which make) \
          -DBUILD_TESTING=OFF \
          -Wdev -Wdeprecated # Add compiler warnings for debugging configuration issues
        if [ $? -ne 0 ]; then echo "Error: CMake configuration failed!"; exit 1; endif
        echo "CMake configuration complete."
        echo "CMake build directory: ${{ env.CMAKE_BUILD_DIR }}"
      shell: bash
      timeout-minutes: 7 # Increased timeout slightly just in case

    - name: Build CMake (Cross-compilation)
      env:
        # Ensure BUILD_DIR variable is available
        CMAKE_BUILD_DIR: ${{ runner.temp }}/cmake_build_android
      run: |
        echo "--- Building CMake ---"
        # Navigate to the directory where CMake was configured
        cd ${{ env.CMAKE_BUILD_DIR }} || exit 1
        echo "Current directory: $(pwd)"

        # Run the build command
        make -j$(nproc) || { echo "Error: CMake build failed!"; exit 1; }
        echo "CMake build complete."
      shell: bash
      timeout-minutes: 20 # This step can take the longest

    - name: Install CMake to Staging Directory
      env:
        # Ensure BUILD_DIR and INSTALL_DIR variables are available
        CMAKE_BUILD_DIR: ${{ runner.temp }}/cmake_build_android
        INSTALL_DIR: ${{ runner.temp }}/cmake_android_install
      run: |
        echo "--- Installing CMake ---"
        # Navigate to the directory where CMake was built
        cd ${{ env.CMAKE_BUILD_DIR }} || exit 1
        echo "Current directory: $(pwd)"
        echo "Installation directory: ${{ env.INSTALL_DIR }}"

        # Run the install command
        make install || { echo "Error: CMake installation failed!"; exit 1; }
        echo "CMake installed to ${{ env.INSTALL_DIR }}"

        echo "--- Verifying Installation Directory Contents ---"
        ls -l ${{ env.INSTALL_DIR }} || echo "Failed to list installation directory contents."
        ls -l ${{ env.INSTALL_DIR }}/bin/ || echo "Failed to list installation bin directory contents."
        test -f ${{ env.INSTALL_DIR }}/bin/cmake && echo "cmake executable found in installation bin directory!" || echo "cmake executable NOT found in installation bin directory!"
        echo "--- Verification Complete ---"
      shell: bash
      timeout-minutes: 5

    - name: Archive built CMake for Android
      uses: actions/upload-artifact@v4
      with:
        name: cmake-android-armeabi-v7a
        path: ${{ runner.temp }}/cmake_android_install
        if-no-files-found: error
        # Optional: Add version tags to artifact name if needed later
        # name: cmake-android-armeabi-v7a-ndk${{ env.NDK_VERSION_NUMBER_FOR_ARTIFACT }}-cmake${{ env.CMAKE_VERSION_TAG_FOR_ARTIFACT }}
      # env:
      #   NDK_VERSION_NUMBER_FOR_ARTIFACT: "29.0.13113456" # You might want to define this variable globally or in a central place
      #   CMAKE_VERSION_TAG_FOR_ARTIFACT: "v3.29.3" # You might want to define this variable globally or in a central place
