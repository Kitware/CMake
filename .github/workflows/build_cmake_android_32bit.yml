name: Build CMake for Android (armeabi-v7a) - Manual NDK Setup 29.0.13113456 + Debugging

on:
  workflow_dispatch

jobs:
  build_android_armeabi_v7a:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # --- LANGKAH MANUAL INSTALASI NDK DIMULAI ---
    - name: Install Android SDK Command-line Tools
      run: |
        echo "--- Installing SDK Command-line Tools ---"
        mkdir -p ${{ runner.temp }}/android-sdk
        export ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk
        echo "ANDROID_SDK_ROOT set to $ANDROID_SDK_ROOT"
        SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
        CMD_TOOLS_ZIP="cmdline-tools.zip"
        echo "Downloading Command-line Tools from $SDK_TOOLS_URL"
        wget $SDK_TOOLS_URL -O $CMD_TOOLS_ZIP || exit 1
        if [ $? -ne 0 ]; then echo "Error: Download failed!"; exit 1; fi
        echo "Command-line Tools downloaded: $CMD_TOOLS_ZIP"

        echo "Extracting Command-line Tools..."
        unzip $CMD_TOOLS_ZIP -d $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction || exit 1
        if [ $? -ne 0 ]; then echo "Error: Extraction failed!"; exit 1; fi
        echo "Command-line Tools extracted to $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction."

        CMD_TOOLS_DIR="$ANDROID_SDK_ROOT/cmdline-tools-temp-extraction"
        CMD_TOOLS_LATEST_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest"
        mkdir -p $CMD_TOOLS_LATEST_DIR

        if [ -d "$CMD_TOOLS_DIR/cmdline-tools" ]; then
            echo "Detected nested structure."
            mv $CMD_TOOLS_DIR/cmdline-tools/* $CMD_TOOLS_LATEST_DIR/ || echo "Nested move command failed."
        else
            echo "Detected flat structure."
            mv $CMD_TOOLS_DIR/* $CMD_TOOLS_LATEST_DIR/ || echo "Flat move command failed."
        fi
        if [ $? -ne 0 ]; then echo "Error: Move failed!"; exit 1; endif
        echo "Moved contents to $CMD_TOOLS_LATEST_DIR."

        rm -rf $ANDROID_SDK_ROOT/cmdline-tools-temp-extraction

        export PATH=$CMD_TOOLS_LATEST_DIR/bin:$PATH
        echo "PATH for this step updated: $PATH"

        echo "--- Listing contents of sdkmanager bin directory ---"
        ls -l $CMD_TOOLS_LATEST_DIR/bin/ || echo "Listing failed for sdkmanager bin directory. Directory might not exist or is empty."

        echo "--- Checking if sdkmanager is found in PATH ---"
        command -v sdkmanager || { echo "sdkmanager NOT found in PATH after this step. PATH is: $PATH"; exit 1; }
        echo "sdkmanager found."


        echo "PATH=$PATH" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

        echo "Accepting SDK licenses..."
        yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT > /dev/null || true
        echo "SDK licenses accepted."
        echo "--- SDK Command-line Tools Installation Complete ---"
      shell: bash
      timeout-minutes: 5

    - name: List Available SDK Packages
      run: |
        echo "--- Listing Available SDK Packages ---"
        export ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}
        export PATH=${{ env.PATH }}

        echo "PATH at the start of List step: $PATH"
        echo "ANDROID_SDK_ROOT at the start of List step: $ANDROID_SDK_ROOT"
        command -v sdkmanager || { echo "sdkmanager NOT found in PATH at start of List step. PATH is: $PATH"; exit 1; }

        # Jalankan sdkmanager --list dan simpan outputnya
        # Menggunakan &> untuk menangkap stdout dan stderr
        echo "Running sdkmanager --list..."
        sdkmanager --list --sdk_root=$ANDROID_SDK_ROOT &> sdk_packages_list.txt || \
          { echo "Error: sdkmanager --list failed!"; cat sdk_packages_list.txt; exit 1; }

        echo "--- Full Package List Output ---"
        cat sdk_packages_list.txt
        echo "--- Listing Complete ---"
        echo "--- IMPORTANT: Check the output above for the correct NDK package name (e.g., ndk;29.0.13113456 or ndk;r21e) ---"
      shell: bash
      timeout-minutes: 3

    - name: Install Android NDK
      run: |
        echo "--- Installing Android NDK ---"
        # Ambil variabel dari env sebelumnya
        export ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}
        export PATH=${{ env.PATH }}

        echo "PATH at the start of Install Android NDK step: $PATH"
        echo "ANDROID_SDK_ROOT at the start of Install Android NDK step: $ANDROID_SDK_ROOT"
        command -v sdkmanager || { echo "sdkmanager NOT found in PATH at start of Install Android NDK step. PATH is: $PATH"; exit 1; }

        # *** PENTING: VERSI NDK Sesuai Permintaan: 29.0.13113456 ***
        # Ini harus sama dengan nama paket di sdkmanager --list
        NDK_VERSION_NUMBER="29.0.13113456"
        NDK_PACKAGE="ndk;$NDK_VERSION_NUMBER" # Format paket untuk sdkmanager --install

        echo "Running sdkmanager to install NDK $NDK_PACKAGE..."
        # Menangkap stdout & stderr ke log file
        yes | sdkmanager --install "$NDK_PACKAGE" --sdk_root=$ANDROID_SDK_ROOT &> sdkmanager_ndk_install.log || \
          { echo "Error: sdkmanager NDK installation failed for $NDK_PACKAGE!"; cat sdkmanager_ndk_install.log; exit 1; }
        echo "sdkmanager NDK installation command finished successfully."

        # Temukan path lengkap NDK yang baru diinstal
        # Cari folder dengan nama nomor versi NDK di dalam $ANDROID_SDK_ROOT/ndk/
        # Gunakan NDK_VERSION_NUMBER yang sama seperti di atas
        echo "Finding installed NDK path..."
        NDK_FULL_PATH=$(find $ANDROID_SDK_ROOT/ndk/ -maxdepth 1 -type d -name "$NDK_VERSION_NUMBER" -print -quit)
        if [ -z "$NDK_FULL_PATH" ]; then
          echo "Error: NDK version $NDK_VERSION_NUMBER not found after installation attempt in $ANDROID_SDK_ROOT/ndk/!"
          ls -la $ANDROID_SDK_ROOT/ndk/ || echo "Failed to list NDK directory contents."
          exit 1
        fi
        echo "Installed NDK path found at: $NDK_FULL_PATH"

        # Set variabel lingkungan ANDROID_NDK_HOME ke path NDK yang ditemukan
        echo "ANDROID_NDK_HOME=$NDK_FULL_PATH" >> $GITHUB_ENV

        echo "--- Android NDK Installation Complete ---"
      shell: bash
      timeout-minutes: 10


    - name: Debug NDK Setup Paths
      run: |
        echo "--- Debugging NDK Variables After Installation ---"
        echo "ANDROID_NDK_HOME = ${{ env.ANDROID_NDK_HOME }}" # Ini HARUS terisi sekarang
        echo "ANDROID_SDK_ROOT = ${{ env.ANDROID_SDK_ROOT }}" # Path SDK root yg disetel manual
        echo "NDK_ROOT = ${{ env.NDK_ROOT }}" # Mungkin kosong

        echo "--- Checking NDK Build Dir ---"
        ls -l ${{ env.ANDROID_NDK_HOME }}/build/ || echo "Directory ${{ env.ANDROID_NDK_HOME }}/build/ not found or listing failed"
        echo "--- Checking NDK CMake Dir ---"
        ls -l ${{ env.ANDROID_NDK_HOME }}/build/cmake/ || echo "Directory ${{ env.ANDROID_NDK_HOME }}/build/cmake/ not found or listing failed"
        echo "--- Checking for toolchain file existence ---"
        test -f ${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake && echo "Toolchain file EXISTS at expected path!" || echo "Toolchain file NOT found at expected path!"
        echo "Expected Toolchain Path used in Configure Step: ${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake"
        echo "--- Debugging Complete ---"
      shell: bash


    - name: Install Host Build Tools
      run: |
        echo "--- Installing additional build tools ---"
        sudo apt-get update -qq
        sudo apt-get install -y cmake make ninja-build git
        echo "Additional build tools installed."
      shell: bash

    - name: Get CMake Source Code
      env:
        CMAKE_VERSION_TAG: "v3.29.3"
      run: |
        echo "--- Getting CMake source code ---"
        git clone --depth 1 --branch ${{ env.CMAKE_VERSION_TAG }} https://github.com/Kitware/CMake.git ${{ runner.temp }}/cmake_src || exit 1
        echo "CMake source downloaded."
      shell: bash

    - name: Create and Navigate to Build Directory
      run: |
        echo "--- Creating build directory ---"
        mkdir ${{ runner.temp }}/cmake_src/build
        cd ${{ runner.temp }}/cmake_src/build || exit 1
        echo "Build directory created."
      shell: bash

    - name: Configure CMake Build for Android armeabi-v7a
      env:
        INSTALL_DIR: ${{ runner.temp }}/cmake_android_install
      run: |
        echo "--- Configuring CMake build ---"
        CMAKE_SOURCE_DIR=${{ runner.temp }}/cmake_src
        CMAKE_BUILD_DIR=${{ runner.temp }}/cmake_build_android

        mkdir -p $CMAKE_BUILD_DIR
        cd $CMAKE_BUILD_DIR || exit 1

        echo "Running cmake configuration..."
        # Path CMAKE_TOOLCHAIN_FILE menggunakan variabel ANDROID_NDK_HOME yang harus disetel oleh langkah sebelumnya
        cmake $CMAKE_SOURCE_DIR \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
          -DCMAKE_MAKE_PROGRAM=$(which make) \
          -DBUILD_TESTING=OFF
        if [ $? -ne 0 ]; then echo "Error: CMake configuration failed!"; exit 1; endif
        echo "CMake configuration complete."
      shell: bash
      timeout-minutes: 7

    - name: Build CMake (Cross-compilation)
      run: |
        echo "--- Building CMake ---"
        cd ${{ runner.temp }}/cmake_build_android || exit 1
        make -j$(nproc) || exit 1
        echo "CMake build complete."
      shell: bash
      timeout-minutes: 20

    - name: Install CMake to Staging Directory
      run: |
        echo "--- Installing CMake ---"
        cd ${{ runner.temp }}/cmake_build_android || exit 1
        make install || exit 1
        echo "CMake installed to ${{ env.INSTALL_DIR }}"
      shell: bash
      timeout-minutes: 5

    - name: Archive built CMake for Android
      uses: actions/upload-artifact@v4
      with:
        name: cmake-android-armeabi-v7a
        path: ${{ runner.temp }}/cmake_android_install
        if-no-files-found: error
      # Optional: Add version tags to artifact name if needed later
      # env:
      #   NDK_VERSION_NUMBER_FOR_ARTIFACT: "29.0.13113456"
      #   CMAKE_VERSION_TAG_FOR_ARTIFACT: "v3.29.3"
      # name: cmake-android-armeabi-v7a-ndk${{ env.NDK_VERSION_NUMBER_FOR_ARTIFACT }}-cmake${{ env.CMAKE_VERSION_TAG_FOR_ARTIFACT }}
